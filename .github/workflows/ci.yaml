name: Django CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ["3.13"]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: pip install uv

    - name: Cache UV environment
      uses: actions/cache@v4
      with:
        path: .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-

    - name: Install Dependencies using UV
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv sync -g dev

    - name: Lint with Ruff
      run: |
        source .venv/bin/activate
        ruff check . --format=github --verbose

    - name: Check formatting with Ruff
      run: |
        source .venv/bin/activate
        ruff format --check . --verbose

    - name: Check Templates with djLint
      run: |
        source .venv/bin/activate
        djlint --check .

    - name: Type Check with mypy
      run: |
        source .venv/bin/activate
        mypy .

    - name: Run Tests with Coverage
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        RECAPTCHA_PUBLIC_KEY: ${{ vars.RECAPTCHA_PUBLIC_KEY || '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI' }}
        RECAPTCHA_PRIVATE_KEY: ${{ secrets.RECAPTCHA_PRIVATE_KEY || '6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe' }}
        SECRET_KEY: "ci-test-secret-key-dummy"
        DEBUG: "False"
      run: |
        source .venv/bin/activate
        coverage run -m pytest
        coverage report
        coverage xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        file: ./coverage.xml
